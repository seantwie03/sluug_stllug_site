---
import { sortMeetingListByMeetingDate } from "@/buildTimeUtils";
import MeetingCardHorizontal from "@/components/MeetingCardHorizontal.astro";
import MeetingCardVertical from "@/components/MeetingCardVertical.astro";
import PresenterWrapper from "@/components/PresenterWrapper.astro";
import { STLLUG_LOGO_ALT } from "@/constants";
import type { Presentation } from "@/content/config";
import stllugLogo from "@/images/STLLUG-Logo.png";
import BaseLayout from "@/layouts/BaseLayout.astro";
import type { InferGetStaticPropsType } from "astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
    const presenterEntries = await getCollection("presenters");
    return presenterEntries.map((entry) => ({
        params: { slug: entry.slug },
        props: { entry },
    }));
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const {
    entry: {
        data: { presenterName, lastUpdated },
        render,
    },
} = Astro.props;
const { Content } = await render();

const meetings = sortMeetingListByMeetingDate(
    await getCollection("meetings", ({ data: { presentations } }) => {
        return presentations.some((presentation: Presentation) => presentation.presenterNames.includes(presenterName));
    })
);
---

<head>
    <meta name="twitter:card" content="player" />
    <meta property="twitter:image" content={Astro.site + stllugLogo.src} />
    <meta property="og:url" content={Astro.site + Astro.url.pathname} />"
    <meta property="og:image" content={Astro.site + stllugLogo.src} />
    <meta property="og:image:alt" content={Astro.site + STLLUG_LOGO_ALT} />
    <meta property="og:image:width" content="1024" />
    <meta property="og:image:height" content="1024" />
    <meta property="og:title" content={`Stl Linux Unix Users Group - ${presenterName}`} />
    <meta property="og:description" content={`Presentations by ${presenterName} at the Stl Linux Unix Users Group.`} />
</head>

<BaseLayout pageTitle={presenterName}>
    <p class="text-gray-600 text-sm font-medium">
        Last Updated: {lastUpdated.toISOString().slice(0, 10)}
    </p>
    <div data-pagefind-body data-pagefind-weight="1">
        <PresenterWrapper>
            <Content />
        </PresenterWrapper>
    </div>
    <h2>Presentations By {presenterName}</h2>
    <div class="flex flex-wrap lg:hidden">
        {
            meetings.map(
                (
                    { collection, id, data: { meetingDate, meetingType, presentations, image, meetupUrl, youtubeUrl } },
                    i
                ) => (
                    <MeetingCardVertical
                        key={i}
                        url={`/${collection}/${id}/`}
                        meetingType={meetingType}
                        meetingDate={meetingDate}
                        presentations={presentations}
                        image={image}
                        meetupUrl={meetupUrl}
                        youtubeUrl={youtubeUrl}
                    />
                )
            )
        }
    </div>
    <div class="hidden lg:block">
        {
            meetings.map(
                (
                    { collection, id, data: { meetingDate, meetingType, presentations, image, meetupUrl, youtubeUrl } },
                    i
                ) => (
                    <MeetingCardHorizontal
                        key={i + 1000}
                        url={`/${collection}/${id}/`}
                        meetingType={meetingType}
                        meetingDate={meetingDate}
                        presentations={presentations}
                        image={image}
                        meetupUrl={meetupUrl}
                        youtubeUrl={youtubeUrl}
                    />
                )
            )
        }
    </div>
</BaseLayout>
