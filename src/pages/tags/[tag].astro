---
import { sortMeetingListByMeetingDate } from "@/buildTimeUtils";
import MeetingCardHorizontal from "@/components/MeetingCardHorizontal.astro";
import MeetingCardVertical from "@/components/MeetingCardVertical.astro";
import { STLLUG_LOGO_ALT } from "@/constants";
import type { Presentation } from "@/content/config";
import stllugLogo from "@/images/STLLUG-Logo.png";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
    const allMeetings = await getCollection("meetings");
    const uniqueTags = [
        ...new Set([
            ...allMeetings
                .map((meeting) => meeting.data.presentations.map((presentation: Presentation) => presentation.tags))
                .flat()
                .flat(),
        ]),
    ];
    return uniqueTags.map((tag) => {
        const filteredPosts = sortMeetingListByMeetingDate(
            allMeetings.filter((meeting) =>
                meeting.data.presentations.some((presentation: Presentation) => presentation.tags.includes(tag))
            )
        );
        return {
            params: { tag },
            props: { meetings: filteredPosts },
        };
    });
}

const { tag } = Astro.params;
const { meetings } = Astro.props;
---

<head>
    <meta name="twitter:card" content="player" />
    <meta property="twitter:image" content={Astro.site + stllugLogo.src} />
    <meta property="og:image" content={Astro.site + stllugLogo.src} />
    <meta property="og:image:alt" content={Astro.site + STLLUG_LOGO_ALT} />
    <meta property="og:image:width" content="1024" />
    <meta property="og:image:height" content="1024" />
    <meta property="og:title" content={`Stl Linux Unix Users Group - ${tag} Presentations`} />
    <meta property="og:description" content={`Presentations about ${tag} at the Stl Linux Unix Users Group.`} />
</head>

<BaseLayout pageTitle={tag}>
    <h2>
        Presentations about: <strong>{tag}</strong>
    </h2>
    <div class="flex flex-wrap lg:hidden">
        {
            meetings.map(
                (
                    { collection, id, data: { meetingDate, meetingType, presentations, image, meetupUrl, youtubeUrl } },
                    i
                ) => (
                    <MeetingCardVertical
                        key={i}
                        url={`/${collection}/${id}/`}
                        meetingType={meetingType}
                        meetingDate={meetingDate}
                        presentations={presentations}
                        image={image}
                        meetupUrl={meetupUrl}
                        youtubeUrl={youtubeUrl}
                    />
                )
            )
        }
    </div>
    <div class="hidden lg:block">
        {
            meetings.map(
                (
                    { collection, id, data: { meetingDate, meetingType, presentations, image, meetupUrl, youtubeUrl } },
                    i
                ) => (
                    <MeetingCardHorizontal
                        key={i + 1000}
                        url={`/${collection}/${id}/`}
                        meetingType={meetingType}
                        meetingDate={meetingDate}
                        presentations={presentations}
                        image={image}
                        meetupUrl={meetupUrl}
                        youtubeUrl={youtubeUrl}
                    />
                )
            )
        }
    </div>
</BaseLayout>
